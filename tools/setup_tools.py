import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

import os
from pathlib import Path

TOOLS = {
    "safe_writer.py": """\
import hashlib
import json
from pathlib import Path

HEADER = "# AUTO-GENERATED by init_template.py"

def checksum(content: str) -> str:
    return hashlib.sha256(content.encode("utf-8")).hexdigest()[:12]

def write_file_safe(path: str, content: str, mode="merge"):
    \"""
    Write content safely:
      - merge: try to merge JSON or append only if missing
      - overwrite: replace only if file is auto-generated
      - skip: leave file untouched if exists
    \"""
    file = Path(path)
    new_checksum = checksum(content)

    if file.exists():
        old = file.read_text()
        if HEADER in old:
            if mode == "overwrite":
                file.write_text(f"{HEADER} [checksum: {new_checksum}]\\n{content}")
                print(f"Overwritten {path}")
            elif mode == "merge":
                try:
                    old_json = json.loads(old)
                    new_json = json.loads(content)
                    merged = {**old_json, **new_json}
                    file.write_text(json.dumps(merged, indent=2))
                    print(f"Merged JSON into {path}")
                except Exception:
                    if content not in old:
                        file.write_text(old + "\\n" + content)
                        print(f"Appended to {path}")
                    else:
                        print(f"No changes for {path}")
            else:
                print(f"Skipped {path}")
        else:
            print(f"Manual file detected, leaving {path} untouched.")
    else:
        file.write_text(f"{HEADER} [checksum: {new_checksum}]\\n{content}")
        print(f"Created {path}")
""",

    "logger.py": """\
import sys

class Logger:
    COLORS = {
        "INFO": "\\033[94m",
        "SUCCESS": "\\033[92m",
        "WARN": "\\033[93m",
        "ERROR": "\\033[91m",
        "RESET": "\\033[0m",
    }

    def _log(self, level, msg):
        color = self.COLORS.get(level, "")
        reset = self.COLORS["RESET"]
        sys.stdout.write(f"{color}[{level}] {msg}{reset}\\n")

    def info(self, msg): self._log("INFO", msg)
    def success(self, msg): self._log("SUCCESS", msg)
    def warn(self, msg): self._log("WARN", msg)
    def error(self, msg): self._log("ERROR", msg)

def get_logger():
    return Logger()
""",

    "adb_helper.py": """\
import subprocess
from tools.logger import get_logger

log = get_logger()

def run_adb_command(cmd):
    try:
        result = subprocess.run(["adb"] + cmd.split(), capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        log.error(f"ADB command failed: {e.stderr.strip()}")
        return None

def install_apk(apk_path):
    log.info(f"Installing {apk_path}...")
    return run_adb_command(f"install -r {apk_path}")

def launch_app(package_name):
    log.info(f"Launching {package_name}...")
    return run_adb_command(f"shell monkey -p {package_name} -c android.intent.category.LAUNCHER 1")

def logcat(filter="*:*"):
    log.info("Starting logcat...")
    subprocess.run(["adb", "logcat", filter])
""",

    "vector_store.py": """\
import json
from pathlib import Path

class SimpleVectorStore:
    def __init__(self, path="memory/vector_store.json"):
        self.path = Path(path)
        self.data = {}
        if self.path.exists():
            self.data = json.loads(self.path.read_text())

    def add(self, key, embedding, metadata=None):
        self.data[key] = {"embedding": embedding, "metadata": metadata or {}}
        self._save()

    def search(self, query_embedding, top_k=5):
        # dummy similarity: just return keys
        return list(self.data.keys())[:top_k]

    def _save(self):
        self.path.write_text(json.dumps(self.data, indent=2))
"""
}

INIT_FILE = """\
# tools/__init__.py
# Makes tools a Python package for clean imports

from . import safe_writer, logger, adb_helper, vector_store
"""

def main():
    tools_dir = Path("tools")
    tools_dir.mkdir(exist_ok=True)

    for filename, content in TOOLS.items():
        file_path = tools_dir / filename
        if file_path.exists():
            print(f"⚠️  Skipping {file_path} (already exists)")
        else:
            file_path.write_text(content)
            print(f"✅ Created {file_path}")

    init_path = tools_dir / "__init__.py"
    if not init_path.exists():
        init_path.write_text(INIT_FILE)
        print(f"✅ Created {init_path}")
    else:
        print(f"⚠️  Skipping {init_path} (already exists)")


if __name__ == "__main__":
    main()
