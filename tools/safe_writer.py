import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

import hashlib
import json
from pathlib import Path

HEADER = "# AUTO-GENERATED by init_template.py"

def checksum(content: str) -> str:
    return hashlib.sha256(content.encode("utf-8")).hexdigest()[:12]

def write_file_safe(path: str, content: str, mode="merge"):
    """
    Write content safely:
      - merge: try to merge JSON or append only if missing
      - overwrite: replace only if file is auto-generated
      - skip: leave file untouched if exists
    """
    file = Path(path)
    new_checksum = checksum(content)

    if file.exists():
        old = file.read_text()
        if HEADER in old:
            if mode == "overwrite":
                file.write_text(f"{HEADER} [checksum: {new_checksum}]\n{content}")
                print(f"Overwritten {path}")
            elif mode == "merge":
                try:
                    old_json = json.loads(old)
                    new_json = json.loads(content)
                    merged = {**old_json, **new_json}
                    file.write_text(json.dumps(merged, indent=2))
                    print(f"Merged JSON into {path}")
                except Exception:
                    if content not in old:
                        file.write_text(old + "\n" + content)
                        print(f"Appended to {path}")
                    else:
                        print(f"No changes for {path}")
            else:
                print(f"Skipped {path}")
        else:
            print(f"Manual file detected, leaving {path} untouched.")
    else:
        file.write_text(f"{HEADER} [checksum: {new_checksum}]\n{content}")
        print(f"Created {path}")
